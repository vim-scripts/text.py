================================================================================
Change log


NOTE: -- FIRST   number changed when I rewrite kernel of program
      -- SECOND, when I change user interface, adding new "greate" method
      -- THIRD,  little bugfix, or adding/rewriting self-documentation,
         or just put some comment in script. Not of all of this little
         changes need to describe in this section.

1.0.3 -- A lot of bugfix. If user use unknown for python 'encoding', script
         try to search substitution in some dictionary, and made some
         warnings and exceptions.
1.0.2 -- Compatibility with python 2.1 tested and bugfixed, instarction how
         to turn it on you can see in installation instructions. Rename
         _AdvancedMO object into NoUniMatchObj, because it may be imported
         into other prgrams. Bugfix in .group() method of NoUniMatchObj
         object. More Documentation.
1.0.1 -- Compatibility with python 2.1 restored, but after some action
         described in installation guide. A little bugfix in NoUniMatchObj()
         class. Bugfix in compatibility with python 2.2 block. I was tested
         some important methods in Linux RedHat 8.0 python 2.2 vim 6.1
1.0.0 -- 1) Change internal representation of text. Now internal object not
         in unicode. This is not comfortable for vim.
         2) Killing back compatibility with python 2.1: python 2.2 required;
         pyhton 2.3 recommended.
         3) Now setitem supported step argument
         (text_obj=[start:stop:step]=sequence)
         4) three new methods adding: insert(), remove() and reverse().
         There are no more FIXME mark in program, but have some TODO: no
         sort() and pop() methods. New class NoUniMatchObj() need
         documentation.
0.2.1 -- Back compatibility block. Warning! This module now already
         compilable under python 2.1 and I was test some functions (like
         Text.center()).  But more powerfull test I don't do.
0.2.0 -- I found greatest bug in my program when they try to work with
         multibyte encoding. This bug force me to rewrite many methods which
         use expressly or by implication +byte_offset feature by vim. Now
         working of this script don't depend off availability of +byte_offset
         feature in vim. There are two new methods provide for access to real
         byte-offset in vim: Text.offset2LC() and Text.LC2offset()
         NOTE: later, in version 1.0.0, I rewrite this again. :(
0.1.4 -- new interaction method: replace_i(); New containers with exceptions
         and buttons
0.1.3 -- now all of _RegExp using unicode flag for compile the pattern adding
         decode() method (just return self.text). __str__() and encode()
         methods now automatically use self.encoding to encode self.text.
         Writing documentation
0.1.2 -- improvement interactive() method
0.1.0 -- adding interactive() method
0.0.0 -- initial version: support mutable string and file methods, version
         info, _RegExp subclass with addition count() method. All working
         good (I'm hope). A lot of known bugs marked in the script by FIXME
         comment
